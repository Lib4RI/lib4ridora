<?php
/**
 * @file
 * Lib4Ri specific Islandora functionality.
 */

// Permissions.
define('LIB4RIDORA_ADMINISTRATOR_PERMISSION', 'administer lib4ridora objects');
define('LIB4RIDORA_JOURNAL_IMPACT_FACTOR_PERMISSION', 'import journal impact factors');

// PIDS.
define('LIB4RIDORA_JOURNAL_CONTENT_MODEL', 'lib4ri:journalCModel');
define('LIB4RIDORA_JOURNAL_COLLECTION', 'lib4ri:journalCollection');

// Forms.
define('LIB4RIDORA_CITATION_FORM', 'Lib4RI Citation MODS Form');
define('LIB4RIDORA_JOURNAL_FORM', 'Lib4RI Journal MODS Form');

/**
 * Implements hook_islandora_required_objects().
 */
function lib4ridora_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'lib4ridora');
  // Journal content model.
  $journal_content_model = $connection->repository->constructObject(LIB4RIDORA_JOURNAL_CONTENT_MODEL);
  $journal_content_model->owner = 'fedoraAdmin';
  $journal_content_model->label = 'Lib4RI Journal Content Model';
  $journal_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $journal_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/journal_ds_composite.xml", FALSE);
  $journal_content_model->ingestDatastream($datastream);

  // Journal collection.
  $journal_collection = $connection->repository->constructObject(LIB4RIDORA_JOURNAL_COLLECTION);
  $journal_collection->owner = 'fedoraAdmin';
  $journal_collection->label = 'Lib4RI Journal Collection';
  $journal_collection->models = 'islandora:collectionCModel';
  $journal_collection->relationships->add(
    FEDORA_RELS_EXT_URI,
    'isMemberOfCollection',
    variable_get('islandora_repository_pid', 'islandora:root')
  );
  // Collection Policy Datastream.
  $datastream = $journal_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $datastream->label = 'COLLECTION_POLICY';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/journal_collection_policy.xml", FALSE);
  $journal_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $journal_collection->constructDatastream('TN', 'M');
  $datastream->label = 'TN';
  $datastream->mimetype = 'image/png';
  $islandora_module_path = drupal_get_path('module', 'islandora');
  $datastream->setContentFromFile("$islandora_module_path/images/folder.png", FALSE);
  $journal_collection->ingestDatastream($datastream);
  return array(
    'lib4ridora' => array(
      'title' => 'Lib4RI',
      'objects' => array(
        $journal_content_model,
        $journal_collection,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function lib4ridora_islandora_xml_form_builder_form_associations() {
  return array(
    'lib4ridora_journal_mods_form' => array(
      'content_model' => LIB4RIDORA_JOURNAL_CONTENT_MODEL,
      'form_name' => LIB4RIDORA_JOURNAL_FORM,
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
    'lib4ridora_citation_mods_form' => array(
      'content_model' => 'ir:citationCModel',
      'form_name' => LIB4RIDORA_CITATION_FORM,
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function lib4ridora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'lib4ridora');
  return array(
    LIB4RIDORA_JOURNAL_FORM => array(
      'form_file' => "$module_path/xml/journal_mods_form.xml",
    ),
    LIB4RIDORA_CITATION_FORM => array(
      'form_file' => "$module_path/xml/citation_mods_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps_alter().
 */
function lib4ridora_ir_citationCModel_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
  unset($steps['islandora_scholar_file_upload']);
}

/**
 * Implements hook_CMODEL_PID_islandora_ingest_steps().
 */
function lib4ridora_ir_citationCModel_islandora_ingest_steps(array $form_state) {
  $steps = array();

  $steps['lib4ridora_multi_pdf_upload'] = array(
    'weight' => 8,
    'type' => 'form',
    'form_id' => 'lib4ridora_upload_form',
    'module' => 'lib4ridora',
    'file' => 'includes/upload.form.inc',
  );
  $steps['lib4ridora_license'] = array(
    'weight' => 49,
    'type' => 'form',
    'form_id' => 'lib4ridora_license_form',
    'module' => 'lib4ridora',
    'file' => 'includes/license.form.inc',
  );

  // Only continue with more steps if there are files being ingested,
  // otherwise it should be ingested right away.
  $upload_step_storage =& islandora_ingest_form_get_step_storage($form_state, 'lib4ridora_multi_pdf_upload');
  if (isset($upload_step_storage['files']) && $upload_step_storage['files']) {
    $steps['lib4ridora_datastream_select'] = array(
      'weight' => 12,
      'type' => 'form',
      'form_id' => 'lib4ridora_datastream_select_form',
      'module' => 'lib4ridora',
      'file' => 'includes/datastream_select.form.inc',
    );
    $steps['lib4ridora_pdf_embargo'] = array(
      'weight' => 16,
      'type' => 'form',
      'form_id' => 'lib4ridora_multi_embargo_form',
      'module' => 'lib4ridora',
      'file' => 'includes/embargo.form.inc',
    );
  }
  return $steps;
}

/**
 * Implements hook_islandora_datastream_access().
 */
function lib4ridora_islandora_datastream_access($op, AbstractDatastream $datastream, $user) {
  $models = array(
    'ir:citationCModel',
  );

  if (!array_intersect($datastream->parent->models, $models)) {
    // Not a model we're interested in...
    return;
  }

  $result = array();

  module_load_include('inc', 'islandora', 'includes/derivatives');
  $options = array(
    'destination_dsid' => $datastream->id,
  );
  $hooks = islandora_invoke_hook_list(ISLANDORA_DERVIATIVE_CREATION_HOOK, $datastream->parent->models, array($datastream->parent));
  uasort($hooks, 'drupal_sort_weight');
  $hooks = islandora_filter_derivatives($hooks, $options, $datastream->parent);
  $map_source = function ($hook) {
    return isset($hook['source_dsid']) ?
      $hook['source_dsid'] :
      NULL;
  };
  $load_datastream = function ($datastream_id) use ($datastream) {
    return ($datastream_id != $datastream->id && isset($datastream->parent[$datastream_id])) ?
      $datastream->parent[$datastream_id] :
      NULL;
  };
  $sources = array_filter(array_map($map_source, $hooks));
  $datastreams = array_filter(array_map($load_datastream, $sources));
  foreach ($datastreams as $source_datastream) {
    $result["lib4ridora_source_datastream_" . $source_datastream->id] = islandora_datastream_access($op, $source_datastream, $user);
  }

  module_load_include('inc', 'lib4ridora', 'includes/embargo.form');
  $availability = $datastream->relationships->get(LIB4RIDORA_RELS_URI, lib4ridora_multi_embargo_build_predicate('availability'));
  $availability = reset($availability);
  if ($availability) {
    $availability = $availability['object']['value'];

    if ($datastream->parent->owner == $user->name || user_access(LIB4RIDORA_ADMINISTRATOR_PERMISSION, $user)) {
      // Allow owner or admins.
      $result['lib4ridora_admin_or_owner'] = TRUE;
    }
    elseif ($availability == 'private') {
      // Private and previous admin/owner check failed; deny access.
      $result['lib4ridora_private'] = FALSE;
    }
    elseif ($availability == 'intranet') {
      $result['lib4ridora_intranet'] = lib4ridora_check_ip(ip_address());
    }
    elseif ($availability == 'date') {
      $embargo_date = $datastream->relationships->get(LIB4RIDORA_RELS_URI, lib4ridora_multi_embargo_build_predicate('embargo_date'));
      $embargo_date = reset($embargo_date);
      if ($embargo_date) {
        $result['lib4ridora_embargo_date'] = REQUEST_TIME > strtotime($embargo_date['object']['value']);
      }
    }
  }

  return $result;
}

/**
 * Check if a given IP is in one of our allowed ranges.
 *
 * @param string $ip_address
 *   A dotted-decimal IPv4 address.
 *
 * @return bool
 *   TRUE if the IP is in an allowed range; otherwise, FALSE.
 */
function lib4ridora_check_ip($ip_address) {
  $cidr_ranges = array(
    '129.129.0.0/16',
    '152.88.0.0/16',
    '192.33.118.0/24',
    '193.134.200.0/21',
    '195.176.244.0/23',
  );

  // Transform an IPv4 CIDR block to an array containing the first and last IPs
  // in the block.
  $cidr_range_to_points = function ($cidr_string) {
    list($base, $bits) = explode('/', $cidr_string);
    $mask = pow(2, 32 - $bits) - 1;
    $start = ip2long($base) & ~$mask;
    $end = $start | $mask;
    return array($start, $end);
  };
  $client_ip = ip2long($ip_address);
  $ip_result = FALSE;
  foreach (array_map($cidr_range_to_points, $cidr_ranges) as $range) {
    list($start, $end) = $range;
    if ($start <= $client_ip && $end >= $client_ip) {
      $ip_result = TRUE;
      break;
    }
  }
  return $ip_result;
}

/**
 * Implements hook_menu_alter().
 */
function lib4ridora_menu_alter(&$items) {
  // Nuke old "Document" tab.
  unset($items['islandora/object/%islandora_object/islandora_scholar_upload']);
}

/**
 * Implements hook_menu().
 */
function lib4ridora_menu() {
  $items = array();

  $items['islandora/object/%islandora_object/lib4ridora_pdf_management'] = array(
    'title' => 'PDF Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lib4ridora_multi_embargo_form', 2),
    'access callback' => 'lib4ridora_citation_access',
    'access arguments' => array(LIB4RIDORA_ADMINISTRATOR_PERMISSION, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/embargo.form.inc',
  );
  $items['islandora/object/%islandora_object/lib4ridora_pdf_list'] = array(
    'title' => 'PDF List',
    'page callback' => 'lib4ridora_list_pdfs',
    'page arguments' => array(2),
    'access callback' => 'lib4ridora_citation_access',
    'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/pdf_list.inc',
  );
  $items['journal-impact-factor'] = array(
    'title' => 'Journal Impact Factor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lib4ridora_journal_impact_factor_form'),
    'access arguments' => array(LIB4RIDORA_JOURNAL_IMPACT_FACTOR_PERMISSION),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/journal_impact.form.inc',
  );
  $items['admin/islandora/solution_pack_config/lib4ridora'] = array(
    'title' => 'Lib4RI',
    'description' => 'Configure lib4ridora.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('lib4ridora_admin'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function lib4ridora_permission() {
  $perms = array();

  $perms[LIB4RIDORA_ADMINISTRATOR_PERMISSION] = array(
    'title' => t('Administer Lib4Ri Objects'),
    'description' => t('Permit access and management of datastream.'),
  );
  $perms[LIB4RIDORA_JOURNAL_IMPACT_FACTOR_PERMISSION] = array(
    'title' => t('Import Journal Impact Factor CSV'),
    'description' => t('Permit importing of journal impact factor CSVs.'),
  );

  return $perms;
}

/**
 * Access callback wrapper.
 *
 * Only allow when we're on a citation object with PDFs.
 */
function lib4ridora_citation_access($op, $object) {
  $has_pdf = function (AbstractObject $object) {
    module_load_include('inc', 'lib4ridora', 'includes/embargo.form');
    $pdf_datastreams = array_filter(iterator_to_array($object), 'lib4ridora_multi_embargo_pdf_filter');
    return !empty($pdf_datastreams);
  };
  return $object instanceof AbstractObject && in_array('ir:citationCModel', $object->models) && islandora_object_access($op, $object) && $has_pdf($object);
}

/**
 * Alter ingest form to change ingest button label for citations.
 */
function lib4ridora_form_islandora_ingest_form_alter(&$form, &$form_state) {
  if ($form['form_step_id']['#value'] == 'lib4ridora_license') {
    $form['next']['#value'] = t('I Agree');
  }
}

/**
 * Implements hook_islandora_solr_search_rss_item_alter().
 */
function lib4ridora_islandora_solr_search_rss_item_alter(&$item, $doc) {
  if (isset($doc['content_models']) && in_array('info:fedora/ir:citationCModel', $doc['content_models'])) {
    $citation = islandora_object_load($doc['PID']);
    $dc_namespace = 'http://purl.org/dc/elements/1.1/';
    if (isset($citation['MODS'])) {
      $item['description'] = citeproc_bibliography_from_mods(
        citeproc_default_style(),
        $citation['MODS']->content
      );
      $mods_doc = new DOMDocument();
      $mods_doc->loadXML($citation['MODS']->content);
      $mods_xpath = new DOMXPath($mods_doc);
      $mods_xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
      $mods_results = $mods_xpath->query('//mods:titleInfo/mods:title');
      if ($mods_results->length) {
        $item['title'] = $mods_results->item(0)->nodeValue;
      }
    }
    $dc_doc = new DOMDocument();
    $dc_doc->loadXML($citation['DC']->content);
    $dc_xpath = new DOMXPath($dc_doc);
    $dc_xpath->registerNamespace('dc', $dc_namespace);

    $dc_contributor_results = $dc_xpath->query('//dc:contributor');
    $creator = '';
    foreach ($dc_contributor_results as $dc_contributor) {
      $creator .= "{$dc_contributor->nodeValue} ";
    }
    if ($creator) {
      $item['items'][] = array(
        'value' => trim($creator),
        'key' => 'dc:creator',
        'attributes' => array('xmlns:dc' => $dc_namespace),
      );
    }

    $dc_date_results = $dc_xpath->query('//dc:date');
    if ($dc_date_results->length) {
      $item['items'][] = array(
        'value' => $dc_date_results->item(0)->nodeValue,
        'key' => 'dc:date',
        'attributes' => array('xmlns:dc' => $dc_namespace),
      );
    }

    $dc_relation_results = $dc_xpath->query('//dc:relation');
    if ($dc_relation_results->length) {
      $item['items'][] = array(
        'value' => $dc_relation_results->item(0)->nodeValue,
        'key' => 'dc:relation',
        'attributes' => array('xmlns:dc' => $dc_namespace),
      );
    }

    $dc_type_results = $dc_xpath->query('//dc:type');
    if ($dc_type_results->length) {
      $item['items'][] = array(
        'value' => $dc_type_results->item(0)->nodeValue,
        'key' => 'dc:type',
        'attributes' => array('xmlns:dc' => $dc_namespace),
      );
    }

    $dc_identifier_results = $dc_xpath->query('//dc:identifier');
    if ($dc_identifier_results->length) {
      $identifier = $dc_identifier_results->item(0)->nodeValue;
      if (strpos($identifier, 'doi:') === 0) {
        $item['items'][] = array(
          'value' => $identifier,
          'key' => 'dc:identifier',
          'attributes' => array('xmlns:dc' => $dc_namespace),
        );
      }
    }
  }
}
