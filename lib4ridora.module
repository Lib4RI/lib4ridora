<?php
/**
 * @file
 * Lib4Ri specific Islandora functionality.
 */

// Permissions.
define('LIB4RIDORA_ADMINISTRATOR_PERMISSION', 'administer lib4ridora objects');
define('LIB4RIDORA_JOURNAL_IMPACT_FACTOR_PERMISSION', 'import journal impact factors');

// PIDS.
define('LIB4RIDORA_JOURNAL_CONTENT_MODEL', 'lib4ri:journalCModel');
define('LIB4RIDORA_JOURNAL_COLLECTION', 'lib4ri:journalCollection');

// Forms.
define('LIB4RIDORA_CITATION_FORM', 'Lib4RI Citation MODS Form');
define('LIB4RIDORA_JOURNAL_FORM', 'Lib4RI Journal MODS Form');

// Datastream ID.
define('LIB4RIDORA_FACTOR_DSID', 'IMPACT-FACTORS');

/**
 * Implements hook_islandora_required_objects().
 */
function lib4ridora_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'lib4ridora');
  // Journal content model.
  $journal_content_model = $connection->repository->constructObject(LIB4RIDORA_JOURNAL_CONTENT_MODEL);
  $journal_content_model->owner = 'fedoraAdmin';
  $journal_content_model->label = 'Lib4RI Journal Content Model';
  $journal_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $journal_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/journal_ds_composite.xml", FALSE);
  $journal_content_model->ingestDatastream($datastream);

  // Journal collection.
  $journal_collection = $connection->repository->constructObject(LIB4RIDORA_JOURNAL_COLLECTION);
  $journal_collection->owner = 'fedoraAdmin';
  $journal_collection->label = 'Lib4RI Journal Collection';
  $journal_collection->models = 'islandora:collectionCModel';
  $journal_collection->relationships->add(
    FEDORA_RELS_EXT_URI,
    'isMemberOfCollection',
    variable_get('islandora_repository_pid', 'islandora:root')
  );
  // Collection Policy Datastream.
  $datastream = $journal_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $datastream->label = 'COLLECTION_POLICY';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/journal_collection_policy.xml", FALSE);
  $journal_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $journal_collection->constructDatastream('TN', 'M');
  $datastream->label = 'TN';
  $datastream->mimetype = 'image/png';
  $islandora_module_path = drupal_get_path('module', 'islandora');
  $datastream->setContentFromFile("$islandora_module_path/images/folder.png", FALSE);
  $journal_collection->ingestDatastream($datastream);
  return array(
    'lib4ridora' => array(
      'title' => 'Lib4RI',
      'objects' => array(
        $journal_content_model,
        $journal_collection,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function lib4ridora_islandora_xml_form_builder_form_associations() {
  return array(
    'lib4ridora_journal_mods_form' => array(
      'content_model' => LIB4RIDORA_JOURNAL_CONTENT_MODEL,
      'form_name' => LIB4RIDORA_JOURNAL_FORM,
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
    'lib4ridora_citation_mods_form' => array(
      'content_model' => 'ir:citationCModel',
      'form_name' => LIB4RIDORA_CITATION_FORM,
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function lib4ridora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'lib4ridora');
  return array(
    LIB4RIDORA_JOURNAL_FORM => array(
      'form_file' => "$module_path/xml/journal_mods_form.xml",
    ),
    LIB4RIDORA_CITATION_FORM => array(
      'form_file' => "$module_path/xml/citation_mods_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps_alter().
 */
function lib4ridora_ir_citationCModel_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
  unset($steps['islandora_scholar_file_upload']);
}

/**
 * Implements hook_CMODEL_PID_islandora_ingest_steps().
 */
function lib4ridora_ir_citationCModel_islandora_ingest_steps(array $form_state) {
  $steps = array();

  $steps['lib4ridora_multi_pdf_upload'] = array(
    'weight' => 8,
    'type' => 'form',
    'form_id' => 'lib4ridora_upload_form',
    'module' => 'lib4ridora',
    'file' => 'includes/upload.form.inc',
  );
  $steps['lib4ridora_license'] = array(
    'weight' => 49,
    'type' => 'form',
    'form_id' => 'lib4ridora_license_form',
    'module' => 'lib4ridora',
    'file' => 'includes/license.form.inc',
  );

  // Only continue with more steps if there are files being ingested,
  // otherwise it should be ingested right away.
  $upload_step_storage =& islandora_ingest_form_get_step_storage($form_state, 'lib4ridora_multi_pdf_upload');
  if (isset($upload_step_storage['files']) && $upload_step_storage['files']) {
    $steps['lib4ridora_pdf_embargo'] = array(
      'weight' => 16,
      'type' => 'form',
      'form_id' => 'lib4ridora_multi_embargo_form',
      'module' => 'lib4ridora',
      'file' => 'includes/embargo.form.inc',
    );
  }
  return $steps;
}

/**
 * Implements hook_islandora_datastream_access().
 */
function lib4ridora_islandora_datastream_access($op, AbstractDatastream $datastream, $user) {
  $models = array(
    'ir:citationCModel',
  );

  if (!array_intersect($datastream->parent->models, $models)) {
    // Not a model we're interested in...
    return;
  }

  $result = array();

  module_load_include('inc', 'islandora', 'includes/derivatives');
  $options = array(
    'destination_dsid' => $datastream->id,
  );
  $hooks = islandora_invoke_hook_list(ISLANDORA_DERVIATIVE_CREATION_HOOK, $datastream->parent->models, array($datastream->parent));
  uasort($hooks, 'drupal_sort_weight');
  $hooks = islandora_filter_derivatives($hooks, $options, $datastream->parent);
  $map_source = function ($hook) {
    return isset($hook['source_dsid']) ?
      $hook['source_dsid'] :
      NULL;
  };
  $load_datastream = function ($datastream_id) use ($datastream) {
    return ($datastream_id != $datastream->id && isset($datastream->parent[$datastream_id])) ?
      $datastream->parent[$datastream_id] :
      NULL;
  };
  $sources = array_filter(array_map($map_source, $hooks));
  $datastreams = array_filter(array_map($load_datastream, $sources));
  foreach ($datastreams as $source_datastream) {
    $result["lib4ridora_source_datastream_" . $source_datastream->id] = islandora_datastream_access($op, $source_datastream, $user);
  }

  module_load_include('inc', 'lib4ridora', 'includes/embargo.form');
  $availability = $datastream->relationships->get(LIB4RIDORA_RELS_URI, lib4ridora_multi_embargo_build_predicate('availability'));
  $availability = reset($availability);
  if ($availability) {
    $availability = $availability['object']['value'];

    if ($datastream->parent->owner == $user->name || user_access(LIB4RIDORA_ADMINISTRATOR_PERMISSION, $user)) {
      // Allow owner or admins.
      $result['lib4ridora_admin_or_owner'] = TRUE;
    }
    elseif ($availability == 'private') {
      // Private and previous admin/owner check failed; deny access.
      $result['lib4ridora_private'] = FALSE;
    }
    elseif ($availability == 'intranet') {
      $result['lib4ridora_intranet'] = lib4ridora_check_ip(ip_address());
    }
    elseif ($availability == 'date') {
      $embargo_date = $datastream->relationships->get(LIB4RIDORA_RELS_URI, lib4ridora_multi_embargo_build_predicate('embargo_date'));
      $embargo_date = reset($embargo_date);
      if ($embargo_date) {
        $result['lib4ridora_embargo_date'] = REQUEST_TIME > strtotime($embargo_date['object']['value']);
      }
    }
  }

  return $result;
}

/**
 * Check if a given IP is in one of our allowed ranges.
 *
 * @param string $ip_address
 *   A dotted-decimal IPv4 address.
 *
 * @return bool
 *   TRUE if the IP is in an allowed range; otherwise, FALSE.
 */
function lib4ridora_check_ip($ip_address) {
  $cidr_ranges = array(
    '129.129.0.0/16',
    '152.88.0.0/16',
    '192.33.118.0/24',
    '193.134.200.0/21',
    '195.176.244.0/23',
  );

  // Transform an IPv4 CIDR block to an array containing the first and last IPs
  // in the block.
  $cidr_range_to_points = function ($cidr_string) {
    list($base, $bits) = explode('/', $cidr_string);
    $mask = pow(2, 32 - $bits) - 1;
    $start = ip2long($base) & ~$mask;
    $end = $start | $mask;
    return array($start, $end);
  };
  $client_ip = ip2long($ip_address);
  $ip_result = FALSE;
  foreach (array_map($cidr_range_to_points, $cidr_ranges) as $range) {
    list($start, $end) = $range;
    if ($start <= $client_ip && $end >= $client_ip) {
      $ip_result = TRUE;
      break;
    }
  }
  return $ip_result;
}

/**
 * Implements hook_menu_alter().
 */
function lib4ridora_menu_alter(&$items) {
  // Nuke old "Document" tab.
  unset($items['islandora/object/%islandora_object/islandora_scholar_upload']);
}

/**
 * Implements hook_menu().
 */
function lib4ridora_menu() {
  $items = array();

  $items['islandora/object/%islandora_object/lib4ridora_pdf_upload'] = array(
    'title' => 'Ingest PDF',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lib4ridora_single_pdf_upload_form', 2),
    'access callback' => 'lib4ridora_citation_model_access',
    'access arguments' => array(ISLANDORA_MINI_WORKFLOW_USE_PERMISSION, 2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pdf-upload.form.inc',
  );
  $items['islandora/object/%islandora_object/lib4ridora_pdf_management'] = array(
    'title' => 'PDF Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lib4ridora_multi_embargo_edit_form', 2),
    'access callback' => 'lib4ridora_citation_access',
    'access arguments' => array(LIB4RIDORA_ADMINISTRATOR_PERMISSION, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/embargo.form.inc',
  );
  $items['islandora/object/%islandora_object/lib4ridora_pdf_list'] = array(
    'title' => 'PDF List',
    'page callback' => 'lib4ridora_list_pdfs',
    'page arguments' => array(2),
    'access callback' => 'lib4ridora_citation_access',
    'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/pdf_list.inc',
  );
  $items['journal-impact-factor'] = array(
    'title' => 'Journal Impact Factor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lib4ridora_journal_impact_factor_form'),
    'access arguments' => array(LIB4RIDORA_JOURNAL_IMPACT_FACTOR_PERMISSION),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/journal_impact.form.inc',
  );
  $items['admin/islandora/solution_pack_config/lib4ridora'] = array(
    'title' => 'Lib4RI',
    'description' => 'Configure lib4ridora.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('lib4ridora_admin'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%/lib4ridora_edit_factors'] = array(
    'title' => 'Impact Factors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lib4ridora_jif_json_form', 2),
    'access callback' => 'lib4ridora_factor_management_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/jif_json.form.inc',
  );
  $items['islandora/object/%islandora_object/manage/document_management'] = array(
    'title' => 'Document Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lib4ridora_mini_workflow_document_management_form', 2),
    'access callback' => 'islandora_object_access',
    'access arguments' => array(ISLANDORA_MINI_WORKFLOW_USE_PERMISSION, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/workflow.form.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function lib4ridora_permission() {
  $perms = array();

  $perms[LIB4RIDORA_ADMINISTRATOR_PERMISSION] = array(
    'title' => t('Administer Lib4Ri Objects'),
    'description' => t('Permit access and management of datastream.'),
  );
  $perms[LIB4RIDORA_JOURNAL_IMPACT_FACTOR_PERMISSION] = array(
    'title' => t('Import Journal Impact Factor CSV'),
    'description' => t('Permit importing of journal impact factor CSVs.'),
  );

  return $perms;
}

/**
 * Access callback wrapper.
 *
 * Only allow when we're on a citation object with PDFs.
 */
function lib4ridora_citation_access($op, $object) {
  $has_pdf = function (AbstractObject $object) {
    module_load_include('inc', 'lib4ridora', 'includes/embargo.form');
    $pdf_datastreams = array_filter(iterator_to_array($object), 'lib4ridora_multi_embargo_pdf_filter');
    return !empty($pdf_datastreams);
  };
  return lib4ridora_citation_model_access($op, $object) && $has_pdf($object);
}

/**
 * Access callback wrapper.
 *
 * Only allow if the object has one of our models.
 */
function lib4ridora_citation_model_access($op, $object) {
  return $object instanceof AbstractObject && in_array('ir:citationCModel', $object->models) && islandora_object_access($op, $object);
}

/**
 * Alter ingest form to change ingest button label for citations.
 */
function lib4ridora_form_islandora_ingest_form_alter(&$form, &$form_state) {
  if ($form['form_step_id']['#value'] == 'lib4ridora_license') {
    $form['next']['#value'] = t('I accept the terms of this license');
  }
}

/**
 * Implements hook_islandora_solr_search_rss_item_alter().
 */
function lib4ridora_islandora_solr_search_rss_item_alter(&$item, $doc) {
  // Bail out if citation isn't requested.
  if (!isset($_GET['citation']) || $_GET['citation'] != 'true') {
    return;
  }
  if (isset($doc['content_models']) && in_array('info:fedora/ir:citationCModel', $doc['content_models'])) {
    $citation = islandora_object_load($doc['PID']);
    if (isset($citation['MODS'])) {
      $items_to_set = array();
      $items_to_set['pubDate'] = $citation->createdDate->format(DATETIME::RFC822);
      foreach ($items_to_set as $key => $value) {
        foreach ($item['items'] as &$sub_item) {
          if ($sub_item['key'] == $key) {
            $sub_item['value'] = $value;
            break;
          }
        }
        unset($sub_item);
      }

      $mods_content = $citation['MODS']->content;
      $item['description'] = citeproc_bibliography_from_mods(
        citeproc_default_style(),
        $mods_content
      );
      $mods_doc = new DOMDocument();
      $mods_doc->loadXML($mods_content);
      $mods_xpath = new DOMXPath($mods_doc);
      $mods_xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
      $mods_results = $mods_xpath->query('//mods:mods/mods:titleInfo/mods:title');
      if ($mods_results->length) {
        $item['title'] = $mods_results->item(0)->nodeValue;
      }
    }
  }
}

/**
 * Implements hook_islandora_solr_config_rss_item_post_render_alter().
 */
function lib4ridora_islandora_solr_config_rss_item_post_render_alter(&$rendered_item, $doc) {
  // Bail out if citation isn't requested.
  if (!isset($_GET['citation']) || $_GET['citation'] != 'true') {
    return;
  }
  if (isset($doc['content_models']) && in_array('info:fedora/ir:citationCModel', $doc['content_models'])) {
    $item = new DOMDocument();
    $item->preserveWhiteSpace = FALSE;
    $item->formatOutput = TRUE;
    $item->loadXML($rendered_item);

    $object = islandora_object_load($doc['PID']);
    if (isset($object['MODS'])) {
      $mods_doc = new DOMDocument();
      $mods_doc->loadXML($object['MODS']->content);

      module_load_include('inc', 'lib4ridora', 'includes/rss');
      $pared_mods = lib4ridora_mods_for_rss($mods_doc);

      $imported_doc = $item->importNode($pared_mods->documentElement, TRUE);

      $item->documentElement->appendChild($imported_doc);
      $rendered_item = $item->saveXML($item->documentElement);
    }
  }
}

/**
 * Check that the user has permission to edit the factors.
 *
 * @param string $object_id
 *   The journal object in question.
 *
 * @return bool
 *   TRUE if the user should have access; otherwise, FALSE.
 */
function lib4ridora_factor_management_access($object_id) {
  $object = islandora_object_load($object_id);

  // Object loaded, has our model and has either an editable stream or no
  // stream but we can ingest one.
  return $object &&
    in_array(LIB4RIDORA_JOURNAL_CONTENT_MODEL, $object->models) &&
    ((isset($object[LIB4RIDORA_FACTOR_DSID]) && islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object[LIB4RIDORA_FACTOR_DSID])) ||
    (!isset($object[LIB4RIDORA_FACTOR_DSID]) && islandora_object_access(ISLANDORA_INGEST, $object)));
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
function lib4ridora_islandora_edit_datastream_registry(AbstractObject $object, AbstractDatastream $datastream) {
  $items = array();

  if ($datastream->id == LIB4RIDORA_FACTOR_DSID && in_array(LIB4RIDORA_JOURNAL_CONTENT_MODEL, $object->models)) {
    $items[] = array(
      'name' => t('Edit Journal Factors'),
      'url' => "islandora/object/{$object->id}/lib4ridora_edit_factors",
      'weight' => 0,
    );
  }

  return $items;
}

/**
 * Implements hook_islandora_solr_object_result_alter().
 */
function lib4ridora_ir_citationcmodel_islandora_solr_object_result_alter(&$result, $processor) {
  $batch = batch_get();
  if (empty($batch)) {
    // We only want to ingest the factor in the CSV export... Don't have a nice
    // way to hook in/identify when we're there, so let's ensure we're inside of
    // a batch.
    return;
  }

  $id_field = variable_get('lib4ridora_solr_field_article_host_journal', 'mods_relatedItem_host_identifier_ms');
  $date_issued_field = variable_get('lib4ridora_solr_field_article_date_issued', 'mods_originInfo_dateIssued_ms');
  $factor_pseudo_field = variable_get('lib4ridora_pseudo_solr_field_factor', 'journal_impact_factor');
  $year_pseudo_field = variable_get('lib4ridora_pseudo_solr_field_year', 'journal_impact_factor_year');

  $solr_doc =& $result['solr_doc'];
  if (!isset($solr_doc[$date_issued_field]) || !isset($solr_doc[$id_field])) {
    $solr_doc[$factor_pseudo_field] = t('N/A');
    $solr_doc[$year_pseudo_field] = t('N/A');
    return;
  }

  // Four sequential digits with no other digits touching is understood to be a
  // year.
  // XXX: Since things could be in wacky encodings, try to use all values.
  $issued_years = preg_filter('/^.*(?<!\d)(\d{4})(?!\d).*$/', '\1', (array) $solr_doc[$date_issued_field]);
  if (empty($issued_years)) {
    $solr_doc[$factor_pseudo_field] = t('N/A');
    $solr_doc[$year_pseudo_field] = t('N/A');
    return;
  }

  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'lib4ridora', 'includes/utilities');
  $valid_ids = array_filter((array) $solr_doc[$id_field], 'islandora_is_valid_pid');
  foreach ($valid_ids as $id) {
    $object = islandora_object_load($id);
    if (!$object) {
      continue;
    }

    $factor = lib4ridora_get_factor_with_fallback($object, $issued_years);
    if ($factor !== FALSE) {
      list($solr_doc[$factor_pseudo_field], $solr_doc[$year_pseudo_field]) = $factor;
      return;
    }
  }

  // Didn't find one... Set "N/A" as the default.
  $solr_doc[$factor_pseudo_field] = t('N/A');
  $solr_doc[$year_pseudo_field] = t('N/A');
}

/**
 * Implements hook_cmodel_pid_dsid_islandora_datastream_alter().
 *
 * Prevents out of date Journal PID links.
 */
function lib4ridora_ir_citationcmodel_mods_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, array &$context) {
  $mods_doc = new DOMDocument();
  if ($context['action'] == 'ingest') {
    $mods_doc->loadXML($datastream->content);
  }
  else {
    // When object is in Fedora.
    $mods_doc->loadXML($context['params']['dsString']);
  }
  $mods_xpath = new DOMXPath($mods_doc);
  $mods_xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');

  $journal_results = $mods_xpath->query('/mods:mods/mods:relatedItem[@type="host"]/mods:identifier[not(@type) and node()]');
  // Bail out if no journal linked.
  if (!$journal_results->length) {
    return;
  }

  $journal_item = $journal_results->item(0);
  $journal = islandora_object_load($journal_item->nodeValue);
  $label_results = $mods_xpath->query('/mods:mods/mods:relatedItem[@type="host"]/mods:titleInfo/mods:title[not(@type)]');

  $journal_mods_doc = new DOMDocument();
  // Assumes journal has MODS.
  $journal_mods_doc->loadXML($journal['MODS']->content);
  $journal_mods_xpath = new DOMXPath($journal_mods_doc);
  $journal_mods_xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
  $journal_label_results = $journal_mods_xpath->query('/mods:mods/mods:titleInfo/mods:title');
  // Destroy link if necessary.
  if (!$label_results->length || !$journal_label_results->length ||
      $label_results->item(0)->nodeValue != $journal_label_results->item(0)->nodeValue) {
    $journal_item->parentNode->removeChild($journal_item);
    $mods = $mods_doc->saveXML();
    if ($context['action'] == 'ingest') {
      $datastream->content = $mods;
    }
    else {
      // When object is in Fedora.
      $context['params']['dsString'] = $mods;
    }
  }
}

/**
 * Implements hook_theme().
 *
 * Used to overrider islandora-solr-wrapper and add citation=true to rss link.
 */
function lib4ridora_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_solr_wrapper' => array(
      'template' => 'theme/lib4ridora-solr-wrapper',
    ),
    'islandora_default' => array(
      'template' => 'theme/lib4ridora-custom-object-view',
    ),
  );
}

/**
 * Implements hook_xml_form_builder_get_form_modify_definition_alter().
 */
function lib4ridora_xml_form_builder_get_form_modify_definition_alter(&$form, &$form_alter) {
  module_load_include('inc', 'lib4ridora', 'includes/field-filter');
  lib4ridora_filter_xml_form_field($form);
}

/**
 * Implements hook_views_api().
 */
function lib4ridora_views_api($module = NULL, $api = NULL) {
  return array(
    "api" => '3.0',
    'path' => drupal_get_path('module', 'lib4ridora') . '/views',
  );
}

/**
 * Implements hook_block_info().
 */
function lib4ridora_block_info() {
  return array(
    'lib4ridora_organizational_units' => array(
      'info' => t('Lib4ri Organizational Units'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function lib4ridora_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'lib4ridora_organizational_units':
      module_load_include('inc', 'lib4ridora', 'includes/block');
      $block['subject'] = t('Organizational Unit');
      $block['content'] = array(
        'organizations' => lib4ridora_get_organizational_block_content(),
      );
      break;

    default:
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function lib4ridora_block_configure($delta) {
  switch ($delta) {
    case 'lib4ridora_organizational_units':
      module_load_include('inc', 'lib4ridora', 'includes/block');
      return lib4ridora_organizational_block_configuration_form();
      break;

    default:
      break;
  }
}

/**
 * Implements hook_block_save().
 */
function lib4ridora_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'lib4ridora_organizational_units':
      variable_set('lib4ridora_organization_block_namespace_filter', $edit['namespace']);
      variable_set('lib4ridora_organization_block_organization_field', $edit['field']);
      break;

    default:
      break;
  }

}
